use egg::Id;
use crate::ast::YafcExpr;
use lalrpop_util::ParseError;


//

grammar(expr: &mut YafcExpr);

extern {
    type Error = String;
}

//

pub Input: Id = {
    Expr => <>,
}

Expr: Id = {
    <e:Expr> "+" <f:Factor> => expr.make_add(e, f),
    <e:Expr> "-" <f:Factor> => expr.make_sub(e, f),
    Factor => <>,
}

Factor: Id = {
    <f:Factor> <a:Atom> => expr.make_mul(f, a),
    <f:Factor> "*" <t:SignedTerm> => expr.make_mul(f, t),
    <f:Factor> "/" <t:SignedTerm> => expr.make_div(f, t),
    SignedTerm => <>,
}

SignedTerm: Id = {
    "+" <SignedTerm> => <>,
    "-" <SignedTerm> => expr.make_neg(<>),
    Term => <>,
}

Term: Id = {
    <t:Term> "^" <a:SignedAtom> => expr.make_pow(t, a),
    Atom => <>,
}

SignedAtom: Id = {
    "+" <SignedAtom> => <>,
    "-" <SignedAtom> => expr.make_neg(<>),
    Atom => <>,
}

Atom: Id = {
    // <Num> "!" => expr.make_fac(<>),
    // <Atom> "!" => expr.make_fac(<>),
    Num => expr.make_num(<>),
    Var => expr.make_var(<>),
    "(" <Expr> ")" => <>,
}

Num: i64 = {
    r"[0-9]+" =>? {
        <>
            .parse()
            .map_err(|err| ParseError::User {
                error: format!("Invalid number literal: {err}")
            })
    }
}

Var: &'input str = {
    r"[a-zA-Z][a-zA-Z0-9]*" => <>,
}
