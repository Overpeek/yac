use std::str::FromStr;
use crate::ast::{Ast, UnaryOp, BinaryOp, Binary};

grammar;

pub Input: Ast = {
    Expr => <>.into(),
}

Expr: Binary = {
    <e:Expr> "+" <f:Factor> => e.with(f),
    <e:Expr> "-" <f:Factor> => e.with(f.with(-1)),
    Factor => Binary::new(BinaryOp::Add).with(<>),
}

Factor: Binary = {
    <f:Factor> <n:Num> => f.with(n),
    <f:Factor> <v:Var> => f.with(v),
    <f:Factor> "(" <e:Expr> ")" => f.with(e),
    <f:Factor> "*" <t:SignedTerm> => f.with(t),
    <f:Factor> "/" <t:SignedTerm> => f.with(t.with(-1)),
    SignedTerm => Binary::new(BinaryOp::Mul).with(<>),
}

SignedTerm: Binary = {
    "+" <a:SignedTerm> => a,
    "-" <a:SignedTerm> => a.with(-1),
    Term => Binary::new(BinaryOp::Mul).with(<>),
}

Term: Binary = {
    <t:Term> "^" <a:SignedAtom> => t.with(a),
    Atom => Binary::new(BinaryOp::Pow).with(<>),
}

SignedAtom: Binary = {
    "+" <a:SignedAtom> => a,
    "-" <a:SignedAtom> => a.with(-1),
    Atom => Binary::new(BinaryOp::Mul).with(<>),
}

Atom: Ast = {
    <n:Num> <f:Postfix> => Ast::unary(f, Ast::Num(n)),
    Num => Ast::Num(<>),
    Var => Ast::Var(<>),
    "(" <Expr> ")" => <>.into(),
}

Postfix: UnaryOp = {
    "!" => UnaryOp::Fac,
}

Num: i64 = {
    r"[0-9]+" => i64::from_str(<>).unwrap()
}

Var: String = {
    r"[a-zA-Z][a-zA-Z0-9]*" => <>.to_string(),
}